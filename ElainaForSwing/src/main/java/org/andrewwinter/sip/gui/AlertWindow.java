package org.andrewwinter.sip.gui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextArea;
import org.andrewwinter.sip.message.InboundSipRequest;
import org.andrewwinter.sip.message.ResponseType;
import org.andrewwinter.sip.parser.Address;
import org.andrewwinter.sip.parser.HeaderName;
import org.andrewwinter.sip.parser.Parameterable;
import org.andrewwinter.sip.parser.SipMessageHelper;
import org.andrewwinter.sip.parser.SipRequest;
import org.andrewwinter.sip.parser.SipResponse;
import org.andrewwinter.sip.parser.SipUri;
import org.andrewwinter.sip.parser.Uri;
import org.andrewwinter.sip.properties.UserAgentProperties;
import org.andrewwinter.sip.sdp.Origin;
import org.andrewwinter.sip.sdp.OriginBuilder;
import org.andrewwinter.sip.sdp.SessionDescription;
import org.andrewwinter.sip.sdp.SessionDescriptionBuilder;

/**
 *
 * @author andrewwinter77
 */
public class AlertWindow extends javax.swing.JDialog {

    private final InboundSipRequest isr;
    
    private final JTextArea textArea;
    
    private final UserAgentProperties properties;
    
    /**
     * Creates new form NewCallDialog
     * @param parent
     * @param modal 
     * @param textArea
     * @param isr 
     * @param properties  
     */
    public AlertWindow(
            final java.awt.Frame parent,
            final boolean modal,
            final JTextArea textArea,
            final InboundSipRequest isr,
            final UserAgentProperties properties) {
        super(parent, modal);
        AudioManager.getInstance().startRinging();
        initComponents();
        final Address from = SipMessageHelper.getFrom(isr.getRequest());
        String displayName = from.getDisplayName();
        if (displayName == null) {
            displayName = "Unknown";
        }
        label.setText("Incoming call from " + displayName + " <" + from.getUri() + ">");
        this.isr = isr;
        this.textArea = textArea;
        this.properties = properties;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        answerBtn = new javax.swing.JButton();
        busyBtn = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        parallelBtn = new javax.swing.JRadioButton();
        sequentialBtn = new javax.swing.JRadioButton();
        proxyBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        answerBtn.setText("Answer");
        answerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerBtnActionPerformed(evt);
            }
        });

        busyBtn.setText("Busy");
        busyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busyBtnActionPerformed(evt);
            }
        });

        label.setText("Incoming call from sip:XXX@XXX");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Proxy behaviour"));

        buttonGroup1.add(parallelBtn);
        parallelBtn.setSelected(true);
        parallelBtn.setText("Parallel");

        buttonGroup1.add(sequentialBtn);
        sequentialBtn.setText("Sequential");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(parallelBtn)
                    .add(sequentialBtn))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(parallelBtn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sequentialBtn)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        proxyBtn.setText("Proxy");
        proxyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(0, 211, Short.MAX_VALUE)
                        .add(proxyBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(busyBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(answerBtn))
                    .add(layout.createSequentialGroup()
                        .add(label)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(label)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(answerBtn)
                    .add(busyBtn)
                    .add(proxyBtn))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void answerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerBtnActionPerformed
        final SipResponse response = generateInviteResponse(isr, ResponseType.OK, properties);
        final CallWindow callWindow = new CallWindow(properties, SipMessageHelper.getTo(response));
        
        // Add the window to the store before sending the response. Doing it the
        // other way around causes a race, and the reINVITE comes in before the
        // window is in the store.
        WindowStore.getInstance().put(response.getCallId(), callWindow);

        textArea.append("\n==OUT============================\n" + response + "\n\n");
        isr.sendResponse(response);
        setVisible(false);
        AudioManager.getInstance().stopRinging();
        
        callWindow.setVisible(true);
    }//GEN-LAST:event_answerBtnActionPerformed

    private void busyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busyBtnActionPerformed
        final SipResponse response = generateInviteResponse(isr, ResponseType.BUSY_HERE, properties);
        textArea.append("\n==OUT============================\n" + response + "\n\n");
        isr.sendResponse(response);
        setVisible(false);
        AudioManager.getInstance().stopRinging();
    }//GEN-LAST:event_busyBtnActionPerformed

    private void proxyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyBtnActionPerformed

        final SipUri to = (SipUri) SipMessageHelper.getTo(isr.getRequest()).getUri();
        final List<Uri> targets = new ArrayList<>();

        if (targets.isEmpty()) {

            // This status is also returned by a redirect or proxy server that
            // recognizes the user identified by the Request-URI, but does not
            // currently have a valid forwarding location for that user.
            
            final SipResponse response = isr.createResponse(ResponseType.TEMPORARILY_UNAVAILABLE.getStatusCode(), "Not Registered");
            isr.sendResponse(response);
        } else {
            isr.proxy(targets, parallelBtn.isSelected());
        }
        
        setVisible(false);
        AudioManager.getInstance().stopRinging();
    }//GEN-LAST:event_proxyBtnActionPerformed

    /**
     *
     * @param isr
     * @param responseType
     * @param properties
     * @return
     */
    public static SipResponse generateInviteResponse(final InboundSipRequest isr, final ResponseType responseType, final UserAgentProperties properties) {
        final SipRequest request = isr.getRequest();
        final SipResponse response = isr.createResponse(responseType);
        
        if (responseType == ResponseType.OK) {
            // A 2xx response to an INVITE SHOULD contain the Allow header field and
            // the Supported header field, and MAY contain the Accept header field.        
            response.addHeader(HeaderName.ALLOW, "INVITE, ACK, CANCEL, OPTIONS, BYE, REGISTER");
            response.addHeader(HeaderName.SUPPORTED, "");
            response.addHeader(HeaderName.ACCEPT, "application/sdp");

            // The UAS MUST add a Contact header field to the response.
            response.addHeader(HeaderName.CONTACT, "<" + properties.getContact() + ">");

            // When a UAS responds to a request with a response that establishes a
            // dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route
            // header field values from the request into the response (including
            // the URIs, URI parameters, and any Record-Route header field
            // parameters, whether they are known or unknown to the UAS) and MUST
            // maintain the order of those values.        
            // TODO: Copy over Record-Route headers.

            final Parameterable contentType = SipMessageHelper.getContentType(request);

            final String sdp;
            if (contentType != null && "application/sdp".equalsIgnoreCase(contentType.getValue())) {
                final SessionDescription offer = SessionDescriptionBuilder.parse(request.getBody());
                sdp = createAnswerSdp(offer).toString();
            } else {
                sdp = createDummySdp();
            }

            response.setBody(sdp);
            SipMessageHelper.setContentLength(sdp.length(), response);
            SipMessageHelper.setContentType("application/sdp", response);
        }
        
        return response;
    }

    private static SessionDescription createAnswerSdp(final SessionDescription offer) {
        return offer;
    }
    
    /**
     * Temporary.
     * @return 
     */
    private static String createDummySdp() {
        // TODO: Do proper SDP negotiation
        
        SessionDescriptionBuilder builder = new SessionDescriptionBuilder();
        
        Origin origin = new OriginBuilder()
                .unicastAddr("0.0.0.0")
                .build();
        
        
        builder = builder.origin(origin);
        return builder.build().toString();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answerBtn;
    private javax.swing.JButton busyBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label;
    private javax.swing.JRadioButton parallelBtn;
    private javax.swing.JButton proxyBtn;
    private javax.swing.JRadioButton sequentialBtn;
    // End of variables declaration//GEN-END:variables
}
